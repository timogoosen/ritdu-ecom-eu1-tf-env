#!/usr/bin/env bash

# ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ #
# ðŸ’¥                                                                        ðŸ’¥ #
# ðŸ’¥ Do not edit this file as it will be overwritten!                       ðŸ’¥ #
# ðŸ’¥                                                                        ðŸ’¥ #
# ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ ðŸ’¥ #

readlink_bin="${READLINK_PATH:-readlink}"
if ! "${readlink_bin}" -f test &> /dev/null; then
  __DIR__="$(dirname "$(python3 -c "import os,sys; print(os.path.realpath(os.path.expanduser(sys.argv[1])))" "${0}")")"
else
  __DIR__="$(dirname "$("${readlink_bin}" -f "${0}")")"
fi

source "${__DIR__}/.bash/functions.lib.sh"

set -E
trap 'throw_exception' ERR

kube_conf_tmp="/tmp/kube.cnf"
kube_env_file="${__DIR__}/.kube-env"

required_file() {
  if [[ ! -f "${kube_env_file}" ]]; then
    consolelog "required env file for kubectl cluster context not found" "error"
    throw_exception
  fi
}

kube_context_init() {
  # given file with content:
  # aws_profile=ritdu-jobs-af1
  # aws_profile=ritdu-cars-af1
  # aws_profile=roam-horizon-af1
  # init kube context for each cluster in venture account
  required_file
  while read -r line; do eval "${line}"; done < <( awk '/^aws_profile/ {a=split($0,l,"="); print "aws-eks-venture-kubeconfig "l[2]}' < "${kube_env_file}" )
}

target_test() {
  kube_context_init
}

target_init() {
  required_file

  required_vars=( \
    kube_env_file \
  )

  for required_var in "${required_vars[@]}"; do
    if [[ -z "${!required_var}" ]]; then
      echo "required var missing (${required_var})" 1>&2
      throw_exception
    fi
  done

  consolelog "initialise local kube context" "success"

  if [[ "${JENKINS_CI}" == "true" ]]; then
    if [[ ! -f "${kube_conf_tmp}" ]]; then
      lock_or_wait "set_kube_config.lock"
      touch "${kube_conf_tmp}"
      kube_context_init
    fi
  else
    kube_context_init
  fi
}

target="target_${1}"
if [[ "$(type -t "${target}")" != "function" ]]; then
  consolelog "unknown target: ${target#*_}" "error"

  echo -e "\n\nAvailable targets:"
  targets=( $(compgen -A function) )
  for target in "${targets[@]}"; do
    if [[ "${target}" == "target_"* ]]; then
      echo "- ${target#*_}"
    fi
  done

  exit 1
fi

shift

"${target}" "${@}"
